DROP DATABASE IF EXISTS STOCKS;
CREATE DATABASE STOCKS;
USE STOCKS;
/* ---- USE IF TABLES ARE TO BE DROPPED ---- */
DROP TABLE IF EXISTS WPL_BANK_ACCOUNT;
DROP TABLE IF EXISTS WPL_TEMP_OTP;
DROP TABLE IF EXISTS WPL_STOCKS_SOLD;
DROP TABLE IF EXISTS WPL_TRANSACTION_TABLE;
DROP TABLE IF EXISTS WPL_STOCKS_PURCHASED;
DROP TABLE IF EXISTS WPL_RECURRING_BUY;
DROP TABLE IF EXISTS WPL_RECURRING_SELL;
DROP TABLE IF EXISTS WPL_USER;
DROP TABLE IF EXISTS WPL_COMPANY;

CREATE TABLE WPL_USER(
  USER_ID INTEGER NOT NULL AUTO_INCREMENT,
  USERNAME VARCHAR(20),
  PWD VARCHAR(20),
  EMAIL VARCHAR(30),
  CONTACT_NO VARCHAR(15),
  ADDRESS VARCHAR(100),
  BALANCE NUMERIC(12,2) DEFAULT 10000.00,
  CONSTRAINT PK_USER_ID PRIMARY KEY(USER_ID)  
);

CREATE TABLE WPL_COMPANY(
COMPANY_ID INTEGER NOT NULL AUTO_INCREMENT,
COMPANY_NAME VARCHAR(200),
CONSTRAINT PK_COMPANY_ID PRIMARY KEY(COMPANY_ID)
);

CREATE TABLE WPL_BANK_ACCOUNT(
USER_ID INTEGER,
BANK_ACC_NO VARCHAR(20),
ROUTING_INFO VARCHAR(20),
CURR_BALANCE NUMERIC(12,2),
CONSTRAINT FK_USER_ID_BANK_ACCOUNT FOREIGN KEY(USER_ID) REFERENCES WPL_USER(USER_ID),
CONSTRAINT PK_BANK_ACC_NO PRIMARY KEY(BANK_ACC_NO)
);

CREATE TABLE WPL_TEMP_OTP(
USER_ID INTEGER,
TEMP_CODE VARCHAR(10),
DATE_CREATED DATE,
USED_FLAG VARCHAR(1),
CONSTRAINT FK_USER_ID_TEMP_OTP FOREIGN KEY(USER_ID) REFERENCES WPL_USER(USER_ID)
);

CREATE TABLE WPL_STOCKS_PURCHASED(
STOCK_ID INTEGER NOT NULL AUTO_INCREMENT,
USER_ID INTEGER,
DATE_OF_PURCHASE DATE,
COMPANY_ID INTEGER,
QUANTITY INTEGER,
PRICE NUMERIC(12,2),
PURCHASE_STATUS VARCHAR(20) DEFAULT 'PURCHASED',
CONSTRAINT FK_COMP_ID_STOCKS_PURCH FOREIGN KEY(COMPANY_ID) REFERENCES WPL_COMPANY(COMPANY_ID),
CONSTRAINT PK_STOCK_ID PRIMARY KEY(STOCK_ID)
);

CREATE TABLE WPL_STOCKS_SOLD(
USER_ID INTEGER,
STOCK_ID INTEGER,
SOLD_ON_DATE DATE,
COMPANY_ID INTEGER,
QUANTITY INTEGER,
PRICE NUMERIC(12,2),
CONSTRAINT FK_COMP_ID_STOCKS_SOLD FOREIGN KEY(COMPANY_ID) REFERENCES WPL_COMPANY(COMPANY_ID),
CONSTRAINT FK_UER_ID_STOCKS_SOLD FOREIGN KEY(USER_ID) REFERENCES WPL_USER(USER_ID),
CONSTRAINT FK_STK_ID_STOCKS_SOLD FOREIGN KEY(STOCK_ID) REFERENCES WPL_STOCKS_PURCHASED(STOCK_ID)
);

CREATE TABLE WPL_TRANSACTION_TABLE(
USER_ID INTEGER,
TRANSACTION_TYPE CHAR(4),
COMPANY_ID INTEGER,
QUANTITY INTEGER,
STATUS CHAR(3),
CONSTRAINT FK_COMP_ID_TXN FOREIGN KEY(COMPANY_ID) REFERENCES WPL_COMPANY(COMPANY_ID),
CONSTRAINT FK_USER_ID_TXN FOREIGN KEY(USER_ID) REFERENCES WPL_USER(USER_ID)
);

CREATE TABLE WPL_RECURRING_BUY(
STOCK_ID INTEGER NOT NULL AUTO_INCREMENT,
USER_ID INTEGER,
COMPANY_ID INTEGER,
QUANTITY INTEGER,
PRICE NUMERIC(12,2),
SCHEDULED_DATE DATE,
NEXT_DATE DATE,
RECURSION_PLAN VARCHAR(10),
PURCHASE_STATUS VARCHAR(20) DEFAULT 'PURCHASED',
CONSTRAINT PK_RECUR_STOCK_ID PRIMARY KEY(STOCK_ID),
CONSTRAINT FK_COMP_ID_REC FOREIGN KEY(COMPANY_ID) REFERENCES WPL_COMPANY(COMPANY_ID),
CONSTRAINT FK_USER_ID_REC FOREIGN KEY(USER_ID) REFERENCES WPL_USER(USER_ID)
);

CREATE TABLE WPL_RECURRING_SELL(
STOCK_ID INTEGER NOT NULL AUTO_INCREMENT,
USER_ID INTEGER,
COMPANY_ID INTEGER,
QUANTITY INTEGER,
PRICE NUMERIC(12,2),
SCHEDULED_DATE DATE,
NEXT_DATE DATE,
RECURSION_PLAN VARCHAR(10),
SOLD_STATUS VARCHAR(20) DEFAULT 'PURCHASED',
CONSTRAINT PK_RECUR_SELL_STOCK_ID PRIMARY KEY(STOCK_ID),
CONSTRAINT FK_COMP_SELL_ID_REC FOREIGN KEY(COMPANY_ID) REFERENCES WPL_COMPANY(COMPANY_ID),
CONSTRAINT FK_USER_SELL_ID_REC FOREIGN KEY(USER_ID) REFERENCES WPL_USER(USER_ID)
);

/* ---- SHOULD RETURN TOTAL (9) TABLES ---- */
SHOW TABLES;